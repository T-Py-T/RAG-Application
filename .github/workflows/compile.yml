# .github/workflows/compile.yml
# Fast checks for pushes, comprehensive checks for PRs targeting main branches

name: Build Checks

on:
  push:
  pull_request:
    branches: [ main, develop, staging ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Lightning-fast syntax validation for all pushes
  fast-syntax-check:
    name: Syntax Check (Ultra Fast)
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      # Python syntax validation (instant - no setup needed)
      - name: Python syntax check
        run: python -c "import ast; ast.parse(open('backend/app.py').read()); print('✅ Python syntax OK')"

      # TypeScript syntax validation (ultra-fast - no dependencies)
      - name: TypeScript syntax check
        run: |
          if command -v npx >/dev/null 2>&1; then
            npx tsc --noEmit --skipLibCheck --target ES2020 --moduleResolution node 2>/dev/null || echo "⚠️  TypeScript warnings (non-blocking)"
            echo "✅ TypeScript syntax check completed"
          else
            echo "⚠️  Node.js not available - skipping TypeScript check"
          fi
        working-directory: frontend

  # Comprehensive validation for PRs to main branches
  comprehensive-check:
    name: Full Validation Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      # Python backend validation
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Validate Python syntax & imports
        run: |
          python -m py_compile backend/app.py
          python -c "import backend.app; print('✅ Backend validation passed')"

      # Frontend validation with actual build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend
      - name: Check TypeScript compilation
        run: pnpm exec tsc --noEmit
        working-directory: frontend
      - name: Build Next.js application
        run: pnpm build
        working-directory: frontend
      - name: Verify build artifacts
        run: |
          ls -la .next/
          echo "✅ Build artifacts verified"
