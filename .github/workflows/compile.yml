# .github/workflows/compile.yml
# Fast checks for pushes, comprehensive checks for PRs targeting main branches

name: Build Checks

on:
  push:
  pull_request:
    branches: [ main, develop, staging ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Fast syntax checks for all pushes
  fast-check:
    name: Fast Syntax Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      # Python syntax validation only
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Check Python syntax
        run: python -m py_compile backend/app.py

      # TypeScript compilation check only
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install minimal frontend dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
        working-directory: frontend
      - name: Check TypeScript compilation
        run: pnpm exec tsc --noEmit
        working-directory: frontend

  # Comprehensive checks for PRs to main branches
  comprehensive-check:
    name: Comprehensive Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      # Full Python validation
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Check Python syntax
        run: python -m py_compile backend/app.py
      - name: Validate Python imports
        run: python -c "import backend.app; print('âœ… Python imports successful')"

      # Full frontend validation
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend
      - name: Run frontend linting
        run: pnpm lint
        working-directory: frontend
      - name: Check TypeScript types
        run: pnpm exec tsc --noEmit
        working-directory: frontend
      - name: Build frontend
        run: pnpm build
        working-directory: frontend
      - name: Verify build output
        run: ls -la .next
        working-directory: frontend
